
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async createChild() : Promise<void> {
    await TAURI_INVOKE("create_child");
},
async greet(name: string) : Promise<string> {
    return await TAURI_INVOKE("greet", { name });
},
async createUser(user: User) : Promise<null> {
    return await TAURI_INVOKE("create_user", { user });
},
async createPot(pot: Pot) : Promise<null> {
    return await TAURI_INVOKE("create_pot", { pot });
},
async upsertOutline(outline: Outline, yUpdates: BytesBase64[]) : Promise<null> {
    return await TAURI_INVOKE("upsert_outline", { outline, yUpdates });
},
async upsertCard(card: Card, yUpdates: BytesBase64[]) : Promise<null> {
    return await TAURI_INVOKE("upsert_card", { card, yUpdates });
},
async createVersion(versionId: UUIDv7Base64) : Promise<null> {
    return await TAURI_INVOKE("create_version", { versionId });
},
async insertPendingYUpdate(yDocId: UUIDv7Base64, yUpdate: BytesBase64) : Promise<null> {
    return await TAURI_INVOKE("insert_pending_y_update", { yDocId, yUpdate });
},
async softDeleteCard(card: Card) : Promise<null> {
    return await TAURI_INVOKE("soft_delete_card", { card });
},
async softDeleteOutline(outline: Outline) : Promise<null> {
    return await TAURI_INVOKE("soft_delete_outline", { outline });
},
async hardDeleteOutline(outline: Outline) : Promise<null> {
    return await TAURI_INVOKE("hard_delete_outline", { outline });
},
async hardDeleteCard(card: Card) : Promise<null> {
    return await TAURI_INVOKE("hard_delete_card", { card });
},
async fetchPots() : Promise<Pot[]> {
    return await TAURI_INVOKE("fetch_pots");
},
async fetchTree(id: UUIDv7Base64, depth: number | null) : Promise<[Outline[], Card[]]> {
    return await TAURI_INVOKE("fetch_tree", { id, depth });
},
async fetchTimeline(from: string) : Promise<[Outline[], Card[]]> {
    return await TAURI_INVOKE("fetch_timeline", { from });
},
async fetchRelation(outlineIds: UUIDv7Base64[], cardIds: UUIDv7Base64[], option: RelationOption) : Promise<[Outline[], Card[]]> {
    return await TAURI_INVOKE("fetch_relation", { outlineIds, cardIds, option });
},
async fetchRelationCount(outlineIds: UUIDv7Base64[], cardIds: UUIDv7Base64[], countChildren: boolean) : Promise<LinkCount[]> {
    return await TAURI_INVOKE("fetch_relation_count", { outlineIds, cardIds, countChildren });
},
async fetchBreadcrumbs(parentId: UUIDv7Base64) : Promise<Breadcrumbs> {
    return await TAURI_INVOKE("fetch_breadcrumbs", { parentId });
},
async fetchYUpdatesByDocId(yDocId: UUIDv7Base64) : Promise<BytesBase64[]> {
    return await TAURI_INVOKE("fetch_y_updates_by_doc_id", { yDocId });
},
async fetchConflictingOutlineIds(outlineId: UUIDv7Base64, parentId: UUIDv7Base64 | null, text: string) : Promise<([UUIDv7Base64, string])[]> {
    return await TAURI_INVOKE("fetch_conflicting_outline_ids", { outlineId, parentId, text });
},
async search(query: string, orderBy: OrderBy, limit: number) : Promise<[Outline[], Card[], SearchResult[]]> {
    return await TAURI_INVOKE("search", { query, orderBy, limit });
},
async getAppState() : Promise<AppState> {
    return await TAURI_INVOKE("get_app_state");
},
async updateAppState(patch: string) : Promise<null> {
    return await TAURI_INVOKE("update_app_state", { patch });
},
async getWorkspaceState() : Promise<WorkspaceState> {
    return await TAURI_INVOKE("get_workspace_state");
},
async updateWorkspaceState(patch: string) : Promise<null> {
    return await TAURI_INVOKE("update_workspace_state", { patch });
},
async openPot(potId: UUIDv7Base64, potName: string) : Promise<null> {
    return await TAURI_INVOKE("open_pot", { potId, potName });
},
async openPotSelector() : Promise<null> {
    return await TAURI_INVOKE("open_pot_selector");
}
}

/** user-defined events **/


export const events = __makeEvents__<{
appStateChange: AppStateChange,
cardChange: CardChange,
outlineChange: OutlineChange,
workspaceStateChange: WorkspaceStateChange
}>({
appStateChange: "app-state-change",
cardChange: "card-change",
outlineChange: "outline-change",
workspaceStateChange: "workspace-state-change"
})

/** user-defined constants **/



/** user-defined types **/

export type AppSetting = { levenshteinDistance: number }
export type AppState = { clientId: UUIDv7Base64; user: UserState | null; pots: UUIDv7Base64[]; setting: AppSetting }
export type AppStateChange = { patch: string }
export type Breadcrumbs = Link[]
export type BytesBase64 = string
export type Card = { id: UUIDv7Base64; outlineId: UUIDv7Base64; fractionalIndex: string; doc: string; quote: Quote | null; links: Links; createdAt: number; updatedAt: number }
export type CardChange = { operation: Operation<CardForIndex>; origin: Origin }
export type CardForIndex = { id: UUIDv7Base64; potId: UUIDv7Base64; outlineId: UUIDv7Base64; fractionalIndex: string; doc: string; quote: Quote | null; breadcrumbs: Breadcrumbs; links: Links; createdAt: number; updatedAt: number }
export type Direction = "back" | "forward"
export type FocusState = { timeline: Record<string, never> } | { search: Record<string, never> } | { tabs: { index: number } }
export type IncludeChildrenOption = { includeCards: boolean }
export type Link = { id: UUIDv7Base64; text: string }
export type LinkCount = { id: UUIDv7Base64; back: number; forward: number }
export type Links = { [key in string]: Breadcrumbs }
export type Operation<T> = { insert: { targets: Target<T>[] } } | { update: { targets: Target<T>[] } } | { delete: { target_ids: UUIDv7Base64[] } }
export type Order = "desc" | "asc"
export type OrderBy = { createdAt: Order } | { updatedAt: Order } | "relevance"
export type Origin = "init" | "remote" | { local: { window_label: string } }
export type Outline = { id: UUIDv7Base64; parentId: UUIDv7Base64 | null; fractionalIndex: string; doc: string; text: string; links: Links; createdAt: number; updatedAt: number }
export type OutlineChange = { operation: Operation<OutlineForIndex>; origin: Origin }
export type OutlineForIndex = { id: UUIDv7Base64; potId: UUIDv7Base64; parentId: UUIDv7Base64 | null; fractionalIndex: string; doc: string; text: string; breadcrumbs: Breadcrumbs; links: Links; createdAt: number; updatedAt: number }
export type Pot = { id: UUIDv7Base64; name: string; owner: UUIDv7Base64 | null }
export type PotState = { id: UUIDv7Base64; name: string }
export type Quote = { id: UUIDv7Base64; versionId: UUIDv7Base64 }
export type RelationOption = { direction: Direction; includeChildren: IncludeChildrenOption | null }
export type SearchResult = { id: UUIDv7Base64; doc_type: string }
export type SidebarState = { isFloat: boolean; width: number }
export type TabState = { views: ViewState[]; focusedViewIdx: number }
export type Target<T> = { currentValue: T; relatedYUpdates: BytesBase64[] }
export type UUIDv7Base64 = string
export type User = { id: UUIDv7Base64; name: string }
export type UserState = { id: UUIDv7Base64; name: string }
export type ViewState = { id: UUIDv7Base64; viewType: ViewType; title: string; flexGrow: number }
export type ViewType = "outline" | "relation" | "search"
export type WorkspaceState = { pot: PotState; tabs: TabState[]; focus: FocusState; sidebar: SidebarState }
export type WorkspaceStateChange = { patch: string }

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
