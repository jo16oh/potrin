
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async greet(name: string) : Promise<string> {
    return await TAURI_INVOKE("greet", { name });
},
async testTuple(name: string) : Promise<BaseN> {
    return await TAURI_INVOKE("test_tuple", { name });
},
async selectOutline(id: number[]) : Promise<OutlinesTable> {
    return await TAURI_INVOKE("select_outline", { id });
},
async insertOutline(text: string | null, parent: NullableBase64String, origin: Origin) : Promise<OutlinesTable> {
    return await TAURI_INVOKE("insert_outline", { text, parent, origin });
},
async selectCards(ids: number[][]) : Promise<RawCard[]> {
    return await TAURI_INVOKE("select_cards", { ids });
},
async insertCard(text: string, outlineId: number[] | null, origin: Origin) : Promise<CardsTable> {
    return await TAURI_INVOKE("insert_card", { text, outlineId, origin });
},
async index(input: IndexTarget[]) : Promise<null> {
    return await TAURI_INVOKE("index", { input });
},
async search(query: string, levenshteinDistance: number, limit: number) : Promise<SearchResult[]> {
    return await TAURI_INVOKE("search", { query, levenshteinDistance, limit });
}
}

/** user-defined events **/


export const events = __makeEvents__<{
cardYUpdatesTableChangeEvent: CardYUpdatesTableChangeEvent,
cardsTableChangeEvent: CardsTableChangeEvent,
outlineYUpdatesTableChangeEvent: OutlineYUpdatesTableChangeEvent,
outlinesTableChangeEvent: OutlinesTableChangeEvent
}>({
cardYUpdatesTableChangeEvent: "card-y-updates-table-change-event",
cardsTableChangeEvent: "cards-table-change-event",
outlineYUpdatesTableChangeEvent: "outline-y-updates-table-change-event",
outlinesTableChangeEvent: "outlines-table-change-event"
})

/** user-defined constants **/



/** user-defined types **/

export type Base64String = string
export type BaseN = string
export type CardYUpdatesTable = { id: Base64String; card_id: Base64String; data: Base64String; updated_at: number; is_checkpoint: number; from_remote: number }
export type CardYUpdatesTableChangeEvent = { operation: Operation; origin: Origin; rows_changed: CardYUpdatesTable[] }
export type CardsTable = { id: Base64String; author: NullableBase64String; outline_id: Base64String; fractional_index: string; text: string; last_materialized_hash: NullableBase64String; created_at: number; updated_at: number; is_deleted: number }
export type CardsTableChangeEvent = { operation: Operation; origin: Origin; rows_changed: CardsTable[] }
export type IndexTarget = { id: string; doc_type: string; text: string }
export type NullableBase64String = Base64String | null
export type Operation = "insert" | "update" | "delete"
export type Origin = "local" | "remote"
export type OutlineYUpdatesTable = { id: Base64String; outline_id: Base64String; data: Base64String; updated_at: number; is_checkpoint: number; from_remote: number }
export type OutlineYUpdatesTableChangeEvent = { operation: Operation; origin: Origin; rows_changed: OutlineYUpdatesTable[] }
export type OutlinesTable = { id: Base64String; author: NullableBase64String; pot_id: NullableBase64String; parent_id: NullableBase64String; fractional_index: string; text: string | null; last_materialized_hash: NullableBase64String; created_at: number; updated_at: number; is_deleted: number }
export type OutlinesTableChangeEvent = { operation: Operation; origin: Origin; rows_changed: OutlinesTable[] }
export type RawCard = { id: string; outline_id: string; text: string; fractional_index: string; created_at: number; updated_at: number }
export type SearchResult = { id: string; doc_type: string }

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: T extends null
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
