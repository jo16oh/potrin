
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async greet(name: string) : Promise<string> {
    return await TAURI_INVOKE("greet", { name });
},
async insertUser(user: User) : Promise<null> {
    return await TAURI_INVOKE("insert_user", { user });
},
async insertPot(pot: Pot) : Promise<null> {
    return await TAURI_INVOKE("insert_pot", { pot });
},
async insertOutline(outline: Outline, yUpdates: OutlineYUpdate[]) : Promise<null> {
    return await TAURI_INVOKE("insert_outline", { outline, yUpdates });
},
async insertCard(card: Card, yUpdates: CardYUpdate[]) : Promise<null> {
    return await TAURI_INVOKE("insert_card", { card, yUpdates });
},
async fetchTree(id: Base64, depth: number | null) : Promise<[Outline[], Card[]]> {
    return await TAURI_INVOKE("fetch_tree", { id, depth });
},
async fetchTimeline(from: string, option: TlOption) : Promise<[Outline[], Card[]]> {
    return await TAURI_INVOKE("fetch_timeline", { from, option });
},
async fetchRelation(outlineIds: Base64[], cardIds: Base64[], option: RelationOption) : Promise<[Outline[], Card[]]> {
    return await TAURI_INVOKE("fetch_relation", { outlineIds, cardIds, option });
},
async fetchRelationCount(outlineIds: Base64[], cardIds: Base64[], countChildren: boolean) : Promise<LinkCount[]> {
    return await TAURI_INVOKE("fetch_relation_count", { outlineIds, cardIds, countChildren });
},
async fetchBreadcrumbs(parentIds: Base64[]) : Promise<Breadcrumb[]> {
    return await TAURI_INVOKE("fetch_breadcrumbs", { parentIds });
},
async index(input: IndexTarget[]) : Promise<null> {
    return await TAURI_INVOKE("index", { input });
},
async search(query: string, potId: string, limit: number) : Promise<SearchResult[]> {
    return await TAURI_INVOKE("search", { query, potId, limit });
},
async updateAppState(value: AppStateValues) : Promise<null> {
    return await TAURI_INVOKE("update_app_state", { value });
}
}

/** user-defined events **/


export const events = __makeEvents__<{
cardChangeEvent: CardChangeEvent,
cardYUpdateChangeEvent: CardYUpdateChangeEvent,
outlineChangeEvent: OutlineChangeEvent,
outlineYUpdateChangeEvent: OutlineYUpdateChangeEvent
}>({
cardChangeEvent: "card-change-event",
cardYUpdateChangeEvent: "card-y-update-change-event",
outlineChangeEvent: "outline-change-event",
outlineYUpdateChangeEvent: "outline-y-update-change-event"
})

/** user-defined constants **/



/** user-defined types **/

export type AppStateValues = { user: UserState | null } | { pot: PotState | null } | { workspace: WorkspaceState | null } | { tabs: TabState[] } | { setting: SettingState }
export type Base64 = string
export type Breadcrumb = { id: Base64; parentId: NullableBase64; text: string | null }
export type Card = { id: Base64; outlineId: Base64; fractionalIndex: string; text: string }
export type CardChangeEvent = { operation: Operation; origin: Origin; rows_changed: Card[] }
export type CardYUpdate = { id: Base64; data: Base64; createdAt: number; isCheckpoint: number }
export type CardYUpdateChangeEvent = { operation: Operation; origin: Origin; rows_changed: CardYUpdate[] }
export type Direction = "back" | "forward"
export type IncludeChildrenOption = { includeCards: boolean }
export type IndexTarget = { id: string; pot_id: string; doc_type: string; text: string }
export type LinkCount = { id: Base64; back: number; forward: number }
export type NullableBase64 = Base64 | null
export type Operation = "insert" | "update" | "delete"
export type Origin = "local" | "remote"
export type Outline = { id: Base64; parentId: NullableBase64; fractionalIndex: string; text: string | null }
export type OutlineChangeEvent = { operation: Operation; origin: Origin; rows_changed: Outline[] }
export type OutlineYUpdate = { id: Base64; data: Base64; createdAt: number; isCheckpoint: number }
export type OutlineYUpdateChangeEvent = { operation: Operation; origin: Origin; rows_changed: OutlineYUpdate[] }
export type Pot = { id: Base64; name: string; owner: Base64 }
export type PotState = { id: Base64; sync: boolean }
export type RelationOption = { direction: Direction; includeChildren: IncludeChildrenOption | null }
export type SearchResult = { id: string; doc_type: string }
export type SettingState = Record<string, never>
export type TabState = { id: Base64; view: string; scrollPos: number }
export type TlOption = "createdAt" | "updatedAt" | "both"
export type User = { id: Base64; name: string }
export type UserState = { id: Base64; name: string }
export type WorkspaceState = { tabs: TabState[]; focusedTabIdx: number | null }

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
