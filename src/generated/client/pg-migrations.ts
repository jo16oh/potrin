export default [
  {
    "statements": [
      "CREATE TABLE cards (\n    id uuid NOT NULL,\n    thread uuid,\n    prev_card uuid,\n    content text,\n    created_at timestamp without time zone,\n    updated_at timestamp without time zone,\n    CONSTRAINT cards_pkey PRIMARY KEY (id)\n)",
      "CREATE INDEX prev_card_idx ON public.cards USING btree (prev_card)",
      "CREATE INDEX thread_idx ON public.cards USING btree (thread)",
      "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'cards', 1)\n  ON CONFLICT DO NOTHING;",
      "DROP TRIGGER IF EXISTS update_ensure_public_cards_primarykey ON \"public\".\"cards\";",
      "CREATE OR REPLACE FUNCTION update_ensure_public_cards_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_ensure_public_cards_primarykey\n  BEFORE UPDATE ON \"public\".\"cards\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_cards_primarykey_function();",
      "DROP TRIGGER IF EXISTS insert_public_cards_into_oplog ON \"public\".\"cards\";",
      "    CREATE OR REPLACE FUNCTION insert_public_cards_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'cards';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'cards',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('content', new.\"content\", 'created_at', new.\"created_at\", 'id', new.\"id\", 'prev_card', new.\"prev_card\", 'thread', new.\"thread\", 'updated_at', new.\"updated_at\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER insert_public_cards_into_oplog\n  AFTER INSERT ON \"public\".\"cards\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_cards_into_oplog_function();",
      "DROP TRIGGER IF EXISTS update_public_cards_into_oplog ON \"public\".\"cards\";",
      "    CREATE OR REPLACE FUNCTION update_public_cards_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'cards';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'cards',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('content', new.\"content\", 'created_at', new.\"created_at\", 'id', new.\"id\", 'prev_card', new.\"prev_card\", 'thread', new.\"thread\", 'updated_at', new.\"updated_at\"),\n            jsonb_build_object('content', old.\"content\", 'created_at', old.\"created_at\", 'id', old.\"id\", 'prev_card', old.\"prev_card\", 'thread', old.\"thread\", 'updated_at', old.\"updated_at\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_public_cards_into_oplog\n  AFTER UPDATE ON \"public\".\"cards\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_cards_into_oplog_function();",
      "DROP TRIGGER IF EXISTS delete_public_cards_into_oplog ON \"public\".\"cards\";",
      "    CREATE OR REPLACE FUNCTION delete_public_cards_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'cards';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'cards',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('content', old.\"content\", 'created_at', old.\"created_at\", 'id', old.\"id\", 'prev_card', old.\"prev_card\", 'thread', old.\"thread\", 'updated_at', old.\"updated_at\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER delete_public_cards_into_oplog\n  AFTER DELETE ON \"public\".\"cards\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_cards_into_oplog_function();"
    ],
    "version": "20240605085702_760"
  },
  {
    "statements": [
      "CREATE TABLE threads (\n    id uuid NOT NULL,\n    parent_thread uuid,\n    prev_thread uuid,\n    title text,\n    created_at timestamp without time zone,\n    updated_at timestamp without time zone,\n    deleted boolean,\n    CONSTRAINT threads_pkey PRIMARY KEY (id)\n)",
      "CREATE INDEX parent_thread_idx ON public.threads USING btree (parent_thread)",
      "CREATE INDEX prev_thread_idx ON public.threads USING btree (prev_thread)",
      "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'threads', 1)\n  ON CONFLICT DO NOTHING;",
      "DROP TRIGGER IF EXISTS update_ensure_public_threads_primarykey ON \"public\".\"threads\";",
      "CREATE OR REPLACE FUNCTION update_ensure_public_threads_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_ensure_public_threads_primarykey\n  BEFORE UPDATE ON \"public\".\"threads\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_threads_primarykey_function();",
      "DROP TRIGGER IF EXISTS insert_public_threads_into_oplog ON \"public\".\"threads\";",
      "    CREATE OR REPLACE FUNCTION insert_public_threads_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'threads';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'threads',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('created_at', new.\"created_at\", 'deleted', new.\"deleted\", 'id', new.\"id\", 'parent_thread', new.\"parent_thread\", 'prev_thread', new.\"prev_thread\", 'title', new.\"title\", 'updated_at', new.\"updated_at\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER insert_public_threads_into_oplog\n  AFTER INSERT ON \"public\".\"threads\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_threads_into_oplog_function();",
      "DROP TRIGGER IF EXISTS update_public_threads_into_oplog ON \"public\".\"threads\";",
      "    CREATE OR REPLACE FUNCTION update_public_threads_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'threads';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'threads',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('created_at', new.\"created_at\", 'deleted', new.\"deleted\", 'id', new.\"id\", 'parent_thread', new.\"parent_thread\", 'prev_thread', new.\"prev_thread\", 'title', new.\"title\", 'updated_at', new.\"updated_at\"),\n            jsonb_build_object('created_at', old.\"created_at\", 'deleted', old.\"deleted\", 'id', old.\"id\", 'parent_thread', old.\"parent_thread\", 'prev_thread', old.\"prev_thread\", 'title', old.\"title\", 'updated_at', old.\"updated_at\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_public_threads_into_oplog\n  AFTER UPDATE ON \"public\".\"threads\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_threads_into_oplog_function();",
      "DROP TRIGGER IF EXISTS delete_public_threads_into_oplog ON \"public\".\"threads\";",
      "    CREATE OR REPLACE FUNCTION delete_public_threads_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'threads';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'threads',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('created_at', old.\"created_at\", 'deleted', old.\"deleted\", 'id', old.\"id\", 'parent_thread', old.\"parent_thread\", 'prev_thread', old.\"prev_thread\", 'title', old.\"title\", 'updated_at', old.\"updated_at\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER delete_public_threads_into_oplog\n  AFTER DELETE ON \"public\".\"threads\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_threads_into_oplog_function();"
    ],
    "version": "20240605085702_853"
  }
]